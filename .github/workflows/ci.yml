name: Python package CI/CD with Miniconda and Tox

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    branches: [main]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']  # Match tags that resemble a version
  pull_request:  # Run in every PR
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

permissions:
  contents: read

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Lints and test document on linux
    runs-on: ubuntu-latest
    outputs:
      docs-path: ${{ steps.build-docs.outputs.docs-path }}
    strategy:
      fail-fast: false
      matrix:
        tox-envs: [docs, doctests, linkcheck, lint]
    defaults:
      run:
        shell: bash -el {0}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with: {fetch-depth: 0}  # deep clone for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "latest"

    - name: Install tox and start tox with ${{ matrix.tox-envs }}
      run: |
        pip install tox
        tox -e ${{ matrix.tox-envs }}

  test:
    name: Unit tests on linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, 3.10]
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with: {fetch-depth: 0}  # deep clone for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run unit tests
        run: |
          pip install tox
          which python
          which tox
          tox

  build:
    needs: [prepare, test]
    name: Build on linux
    runs-on: ubuntu-latest
    outputs:
      python-path: ${{ steps.setup-python.outputs.python-path }}
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
    strategy:
      fail-fast: false
      matrix:
        tox-envs: [build]
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with: {fetch-depth: 0}  # deep clone for setuptools-scm

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          miniconda-version: "latest"
          auto-activate-base: true

      - name: Build package
        run: |
          conda install tox
          tox

      - name: Upload distribution files
        uses: actions/upload-artifact@v2
        with:
          name: python-distribution-files
          path: dist/

  publish:
    needs: build
    name: Publish on PyPI
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          miniconda-version: "latest"
          auto-activate-base: true
          python-version: 3.11
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v3
        with: {name: python-distribution-files, path: dist/}
      - name: Publish Package
        env:
          # TODO: Set your PYPI_TOKEN as a secret using GitHub UI
          # - https://pypi.org/help/#apitoken
          # - https://docs.github.com/en/actions/security-guides/encrypted-secrets
          TWINE_REPOSITORY: pypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          conda install tox
          tox -e publish

  deploy:
    needs: publish
    name: Deploy on Anaconda
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          auto-update-conda: false
          auto-activate-base: true
          python-version: 3.11
      - name: Deploy Package
        run: |
          conda install tox
          tox -e conda-package
