name: Python package CI/CD with Miniconda and Tox

on:
  push:
    # Avoid using all the resources/limits available by checking only
    # relevant branches and tags. Other branches can be checked via PRs.
    branches: [main]
    tags: ['v[0-9]*', '[0-9]+.[0-9]+*']  # Match tags that resemble a version
  pull_request:  # Run in every PR
  workflow_dispatch:  # Allow manually triggering the workflow
  schedule:
    # Run roughly every 15 days at 00:00 UTC
    # (useful to check if updates on dependencies break the package)
    - cron: '0 0 1,16 * *'

permissions:
  contents: read

concurrency:
  group: >-
    ${{ github.workflow }}-${{ github.ref_type }}-
    ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  prepare:
    name: Prepare on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    outputs:
      python-path: ${{ steps.setup-python.outputs.python-path }}
      wheel-distribution: ${{ steps.wheel-distribution.outputs.path }}
      docs-path: ${{ steps.build-docs.outputs.docs-path }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with: {fetch-depth: 0}  # deep clone for setuptools-scm

    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2
      with:
        auto-update-conda: true
        auto-activate-base: true
        python-version: ${{ matrix.python-version }}
      run: |
        conda config --set always_yes yes --set changeps1 no
        conda info -a
        conda install -c conda-forge tox tox-conda

    - name: Run static analysis and format checkers
      shell: bash
      run: tox -p auto

  publish:
    name: Publish on PyPI
    if: ${{ github.event_name == 'push' && contains(github.ref, 'refs/tags/') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with: {python-version: "3.11"}
      - name: Retrieve pre-built distribution files
        uses: actions/download-artifact@v3
        with: {name: python-distribution-files, path: dist/}
      - name: Publish Package
        env:
          # TODO: Set your PYPI_TOKEN as a secret using GitHub UI
          # - https://pypi.org/help/#apitoken
          # - https://docs.github.com/en/actions/security-guides/encrypted-secrets
          TWINE_REPOSITORY: pypi
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: pipx run tox -e publish
